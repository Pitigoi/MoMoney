//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace login
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;


    public partial class PayContext : DbContext
    {
        public PayContext()
            : base("name=PayContext")
        {
        }
        public static int currentId;
        public virtual DbSet<categories> Categories { get; set; }
        public virtual DbSet<logins> Logins { get; set; }
        public virtual DbSet<payments> Payments { get; set; }
        public virtual DbSet<incomes> Incomes { get; set; }


        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<categories>()
                .Property(e => e.id)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            modelBuilder.Entity<categories>()
                .Property(e => e.name)
                .IsFixedLength();

            modelBuilder.Entity<categories>()
                .HasMany(e => e.payments)
                .WithRequired(e => e.categories);

            modelBuilder.Entity<logins>()
                .Property(e => e.id)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            modelBuilder.Entity<logins>()
                .Property(e => e.username)
                .IsFixedLength();

            modelBuilder.Entity<logins>()
                .Property(e => e.password)
                .IsFixedLength();

            modelBuilder.Entity<logins>()
                .Property(e => e.name)
                .IsFixedLength();

            modelBuilder.Entity<logins>()
                .Property(e => e.balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<logins>()
                .HasMany(e => e.incomes)
                .WithRequired(e => e.logins)
                .HasForeignKey(e => e.uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<logins>()
                .HasMany(e => e.payments)
                .WithRequired(e => e.logins)
                .HasForeignKey(e => e.uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<payments>()
                .Property(e => e.id)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            modelBuilder.Entity<payments>()
                .Property(e => e.amount)
                .HasPrecision(19, 4);

            /*modelBuilder.Entity<payment>()
                        .Property(e => e.time)
                        .HasDefaultValueSql("getdate()");*/

            modelBuilder.Entity<incomes>()
                .Property(e => e.id)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            modelBuilder.Entity<incomes>()
                .Property(e => e.amount)
                .HasPrecision(19, 4);
        }
        public static void AddCategory(string categoryName)
        {

            using (var context = new PayContext())
            {
                var category = new categories
                {
                    name = categoryName
                };

                context.Categories.Add(category);
                context.SaveChanges();

            }
        }
        public static void AddUser(string legalName, string username, string password)
        {

            using (var context = new PayContext())
            {
                var login = new logins
                {
                    name = legalName,
                    username = username,
                    password = password,
                    balance = decimal.Zero
                };

                context.Logins.Add(login);
                context.SaveChanges();

            }
        }
        public static void AddPayment(int categoryid, decimal suma, string note,DateTime date)
        {
            if (suma > 0)
                suma *= -1;
            using (var context = new PayContext())
            {
                if (context.Categories.Find(categoryid) == null)
                {
                    return;
                }
                var payment = new payments
                {
                    uid = PayContext.currentId,
                    category = categoryid,
                    time = date,
                    amount = suma,
                    note = note
                };

                context.Payments.Add(payment);
                context.Logins.Find(PayContext.currentId).balance -= suma;
                context.SaveChanges();
            }
        }
        public static void AddIncome(decimal suma, string note,DateTime date)
        {

            if (suma < 0)
                suma *= -1;
            using (var context = new PayContext())
            {
                var income = new incomes
                {
                    uid = PayContext.currentId,
                    time = date,
                    amount = suma,
                    note = note
                };

                context.Incomes.Add(income);
                context.Logins.Find(PayContext.currentId).balance += suma;
                context.SaveChanges();
            }
        }

        public static ICollection<incomes> ShowIncome()
        {
            using (var context = new PayContext())
            {
                return context.Incomes
                    .Where(r => r.uid == PayContext.currentId)
                    .ToList();
            }
        }
        public static ICollection<payments> ShowPayment()
        {
            using (var context = new PayContext())
            {
                return context.Payments
                    .Where(r => r.uid == PayContext.currentId)
                    .ToList();
            }
        }
        public static ICollection<payments> ShowPayment(int categoryid)
        {
            using (var context = new PayContext())
            {
                return context.Payments
                    .Where(r => r.uid == PayContext.currentId)
                    .Where(m => m.category == categoryid)
                    .ToList();
            }
        }
    }
}
